{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Desktop\\\\bolo\\\\react-form-builder\\\\frontend\\\\src\\\\pages\\\\QuestionTypes\\\\FormBuilder.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport CategorizeQuestion from './CategorizeQuestion';\nimport ClozeQuestion from './ClozeQuestion';\nimport CreateForm from '../FormCreationPage/CreateForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FormBuilder = () => {\n  _s();\n\n  const [formQuestions, setFormQuestions] = useState([]);\n\n  const addQuestion = question => {\n    setFormQuestions([...formQuestions, question]);\n  };\n\n  const handleQuestionChange = (index, updatedQuestion) => {\n    const updatedQuestions = [...formQuestions];\n    updatedQuestions[index] = updatedQuestion;\n    setFormQuestions(updatedQuestions);\n  };\n\n  const renderQuestionType = (question, index) => {\n    switch (question.type) {\n      case 'categorize':\n        return /*#__PURE__*/_jsxDEV(CategorizeQuestion, {\n          question: question,\n          onChange: updatedQuestion => handleQuestionChange(index, updatedQuestion)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 21\n        }, this);\n\n      case 'cloze':\n        return /*#__PURE__*/_jsxDEV(ClozeQuestion, {\n          question: question,\n          onChange: updatedQuestion => handleQuestionChange(index, updatedQuestion)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, this);\n\n      case 'comprehension':\n        return /*#__PURE__*/_jsxDEV(CreateForm // key={index}\n        // question={question}\n        // onChange={(updatedQuestion) => handleQuestionChange(index, updatedQuestion)}\n        , {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this);\n\n      default:\n        return null;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Form Builder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), formQuestions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: renderQuestionType(question, index)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addQuestion({\n        type: 'categorize',\n        content: ''\n      }),\n      children: \"Add Categorize Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addQuestion({\n        type: 'cloze',\n        content: ''\n      }),\n      children: \"Add Cloze Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addQuestion({\n        type: 'comprehension',\n        content: ''\n      }),\n      children: \"Add Comprehension Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => console.log(formQuestions),\n      children: \"Submit Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FormBuilder, \"uvkf+h9LT3jrHBCG+Zv0JX1ZPzU=\");\n\n_c = FormBuilder;\nexport default FormBuilder;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormBuilder\");","map":{"version":3,"sources":["C:/Users/Dell/Desktop/bolo/react-form-builder/frontend/src/pages/QuestionTypes/FormBuilder.jsx"],"names":["React","useState","CategorizeQuestion","ClozeQuestion","CreateForm","FormBuilder","formQuestions","setFormQuestions","addQuestion","question","handleQuestionChange","index","updatedQuestion","updatedQuestions","renderQuestionType","type","map","content","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,UAAP,MAAuB,gCAAvB;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAAC,EAAD,CAAlD;;AAEA,QAAMO,WAAW,GAAIC,QAAD,IAAc;AAC9BF,IAAAA,gBAAgB,CAAC,CAAC,GAAGD,aAAJ,EAAmBG,QAAnB,CAAD,CAAhB;AACH,GAFD;;AAIA,QAAMC,oBAAoB,GAAG,CAACC,KAAD,EAAQC,eAAR,KAA4B;AACrD,UAAMC,gBAAgB,GAAG,CAAC,GAAGP,aAAJ,CAAzB;AACAO,IAAAA,gBAAgB,CAACF,KAAD,CAAhB,GAA0BC,eAA1B;AACAL,IAAAA,gBAAgB,CAACM,gBAAD,CAAhB;AACH,GAJD;;AAMA,QAAMC,kBAAkB,GAAG,CAACL,QAAD,EAAWE,KAAX,KAAqB;AAC5C,YAAQF,QAAQ,CAACM,IAAjB;AACI,WAAK,YAAL;AACI,4BACI,QAAC,kBAAD;AAEI,UAAA,QAAQ,EAAEN,QAFd;AAGI,UAAA,QAAQ,EAAGG,eAAD,IAAqBF,oBAAoB,CAACC,KAAD,EAAQC,eAAR;AAHvD,WACSD,KADT;AAAA;AAAA;AAAA;AAAA,gBADJ;;AAOJ,WAAK,OAAL;AACI,4BACI,QAAC,aAAD;AAEI,UAAA,QAAQ,EAAEF,QAFd;AAGI,UAAA,QAAQ,EAAGG,eAAD,IAAqBF,oBAAoB,CAACC,KAAD,EAAQC,eAAR;AAHvD,WACSD,KADT;AAAA;AAAA;AAAA;AAAA,gBADJ;;AAOJ,WAAK,eAAL;AACI,4BACI,QAAC,UAAD,CACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA,gBADJ;;AAOJ;AACI,eAAO,IAAP;AA1BR;AA4BH,GA7BD;;AA+BA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKL,aAAa,CAACU,GAAd,CAAkB,CAACP,QAAD,EAAWE,KAAX,kBACf;AAAA,gBAAkBG,kBAAkB,CAACL,QAAD,EAAWE,KAAX;AAApC,OAAUA,KAAV;AAAA;AAAA;AAAA;AAAA,YADH,CAFL,eAKI;AAAQ,MAAA,OAAO,EAAE,MAAMH,WAAW,CAAC;AAAEO,QAAAA,IAAI,EAAE,YAAR;AAAsBE,QAAAA,OAAO,EAAE;AAA/B,OAAD,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,eAQI;AAAQ,MAAA,OAAO,EAAE,MAAMT,WAAW,CAAC;AAAEO,QAAAA,IAAI,EAAE,OAAR;AAAiBE,QAAAA,OAAO,EAAE;AAA1B,OAAD,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ,eAWI;AAAQ,MAAA,OAAO,EAAE,MAAMT,WAAW,CAAC;AAAEO,QAAAA,IAAI,EAAE,eAAR;AAAyBE,QAAAA,OAAO,EAAE;AAAlC,OAAD,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXJ,eAcI;AAAQ,MAAA,OAAO,EAAE,MAAMC,OAAO,CAACC,GAAR,CAAYb,aAAZ,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAdJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH,CA9DD;;GAAMD,W;;KAAAA,W;AAgEN,eAAeA,WAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport CategorizeQuestion from './CategorizeQuestion';\r\nimport ClozeQuestion from './ClozeQuestion';\r\nimport CreateForm from '../FormCreationPage/CreateForm';\r\n\r\nconst FormBuilder = () => {\r\n    const [formQuestions, setFormQuestions] = useState([]);\r\n\r\n    const addQuestion = (question) => {\r\n        setFormQuestions([...formQuestions, question]);\r\n    };\r\n\r\n    const handleQuestionChange = (index, updatedQuestion) => {\r\n        const updatedQuestions = [...formQuestions];\r\n        updatedQuestions[index] = updatedQuestion;\r\n        setFormQuestions(updatedQuestions);\r\n    };\r\n\r\n    const renderQuestionType = (question, index) => {\r\n        switch (question.type) {\r\n            case 'categorize':\r\n                return (\r\n                    <CategorizeQuestion\r\n                        key={index}\r\n                        question={question}\r\n                        onChange={(updatedQuestion) => handleQuestionChange(index, updatedQuestion)}\r\n                    />\r\n                );\r\n            case 'cloze':\r\n                return (\r\n                    <ClozeQuestion\r\n                        key={index}\r\n                        question={question}\r\n                        onChange={(updatedQuestion) => handleQuestionChange(index, updatedQuestion)}\r\n                    />\r\n                );\r\n            case 'comprehension':\r\n                return (\r\n                    <CreateForm\r\n                    // key={index}\r\n                    // question={question}\r\n                    // onChange={(updatedQuestion) => handleQuestionChange(index, updatedQuestion)}\r\n                    />\r\n                );\r\n            default:\r\n                return null;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Form Builder</h2>\r\n            {formQuestions.map((question, index) => (\r\n                <div key={index}>{renderQuestionType(question, index)}</div>\r\n            ))}\r\n            <button onClick={() => addQuestion({ type: 'categorize', content: '' })}>\r\n                Add Categorize Question\r\n            </button>\r\n            <button onClick={() => addQuestion({ type: 'cloze', content: '' })}>\r\n                Add Cloze Question\r\n            </button>\r\n            <button onClick={() => addQuestion({ type: 'comprehension', content: '' })}>\r\n                Add Comprehension Question\r\n            </button>\r\n            <button onClick={() => console.log(formQuestions)}>Submit Form</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FormBuilder;\r\n"]},"metadata":{},"sourceType":"module"}