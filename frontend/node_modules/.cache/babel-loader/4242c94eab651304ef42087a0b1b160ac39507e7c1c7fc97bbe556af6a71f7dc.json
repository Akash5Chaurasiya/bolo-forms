{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Desktop\\\\bolo\\\\react-form-builder\\\\frontend\\\\src\\\\pages\\\\QuestionTypes\\\\CategorizeQuestion.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { useDrop, useDrag } from 'react-dnd';\n\n// const Answer = ({ answer, index, moveAnswer }) => {\n//     const [{ isDragging }, drag] = useDrag({\n//         type: 'ANSWER',\n//         item: { index },\n//         collect: (monitor) => ({\n//             isDragging: monitor.isDragging(),\n//         }),\n//     });\n\n//     return (\n//         <div ref={drag} style={{ padding: '8px', border: '1px solid #ccc', margin: '4px', cursor: 'move', opacity: isDragging ? 0.5 : 1 }}>\n//             {answer.text}\n//         </div>\n//     );\n// };\n\n// const Category = ({ category, answers, setAnswers, moveAnswer }) => {\n//     const [, drop] = useDrop({\n//         accept: 'ANSWER',\n//         drop: (item) => {\n//             moveAnswer(item.index, answers.length, category);\n//             const updatedAnswers = [...answers];\n//             updatedAnswers[item.index].category = category;\n//             setAnswers(updatedAnswers);\n//         },\n//     });\n\n//     return (\n//         <div ref={drop} style={{ padding: '8px', border: '2px solid #000', margin: '8px' }}>\n//             <strong>{category}</strong>\n//             {answers\n//                 .filter((answer) => answer.category === category)\n//                 .map((answer, index) => (\n//                     <p key={index}>{answer.text}</p>\n//                 ))}\n//         </div>\n//     );\n// };\n\n// const CategorizeQuestion = ({ question, onChange }) => {\n//     const [answers, setAnswers] = useState([]);\n\n//     const handleAnswerChange = (dragIndex, dropIndex, newCategory) => {\n//         const updatedAnswers = [...answers];\n//         const [draggedAnswer] = updatedAnswers.splice(dragIndex, 1);\n//         updatedAnswers.splice(dropIndex, 0, draggedAnswer);\n//         setAnswers(updatedAnswers);\n\n//         // Update the category if a new category is provided\n//         if (newCategory) {\n//             draggedAnswer.category = newCategory;\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <label>Categorize:</label>\n//             <input\n//                 type=\"text\"\n//                 placeholder=\"Enter the categorization question\"\n//                 value={question.content}\n//                 onChange={(e) => onChange({ ...question, content: e.target.value })}\n//             />\n//             <div style={{ display: 'flex', marginTop: '10px' }}>\n//                 <div style={{ flex: 1 }}>\n//                     <h4>Answers</h4>\n//                     {answers.map((answer, index) => (\n//                         <Answer key={index} answer={answer} index={index} moveAnswer={handleAnswerChange} />\n//                     ))}\n//                 </div>\n//                 <div style={{ flex: 1 }}>\n//                     <h4>Categories</h4>\n//                     {['Category 1', 'Category 2', 'Category 3'].map((category, index) => (\n//                         <Category\n//                             key={index}\n//                             category={category}\n//                             answers={answers}\n//                             setAnswers={setAnswers}\n//                             moveAnswer={handleAnswerChange}\n//                         />\n//                     ))}\n//                 </div>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default CategorizeQuestion;\nimport React, { useState } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MatchingWord = ({\n  word,\n  onDrop\n}) => {\n  _s();\n  const [, drag] = useDrag({\n    type: 'WORD',\n    item: {\n      word\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: drag,\n    style: {\n      padding: '8px',\n      border: '1px solid #ccc',\n      margin: '4px',\n      cursor: 'move'\n    },\n    children: word\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n};\n_s(MatchingWord, \"MI5AnXDwEe/3qbRALgapnugQ4mk=\", false, function () {\n  return [useDrag];\n});\n_c = MatchingWord;\nconst MatchingPair = ({\n  question,\n  onDrop\n}) => {\n  _s2();\n  const [{\n    isOver\n  }, drop] = useDrop({\n    accept: 'WORD',\n    drop: item => onDrop(item.word, question.id),\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: drop,\n    style: {\n      padding: '8px',\n      border: isOver ? '2px dashed #000' : '2px solid #000',\n      margin: '8px'\n    },\n    children: [question.prompt, \" \", question.answer]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 9\n  }, this);\n};\n_s2(MatchingPair, \"9166pYLrZ/JzF75YDim8ZjfICTM=\", false, function () {\n  return [useDrop];\n});\n_c2 = MatchingPair;\nconst CategorizeQuestion = () => {\n  _s3();\n  const [matchingWords, setMatchingWords] = useState(['Apple', 'Banana', 'Cherry', 'Date']);\n  const [matchingPairs, setMatchingPairs] = useState([{\n    id: 1,\n    prompt: 'Fruit 1:',\n    answer: ''\n  }, {\n    id: 2,\n    prompt: 'Fruit 2:',\n    answer: ''\n  }, {\n    id: 3,\n    prompt: 'Fruit 3:',\n    answer: ''\n  }, {\n    id: 4,\n    prompt: 'Fruit 4:',\n    answer: ''\n  }]);\n  const handleDrop = (word, pairId) => {\n    const updatedPairs = matchingPairs.map(pair => pair.id === pairId ? {\n      ...pair,\n      answer: word\n    } : pair);\n    setMatchingPairs(updatedPairs);\n  };\n  const saveForm = () => {\n    const formJson = {\n      title: formTitle,\n      body: formBody\n    };\n    dispatch(formActions.saveForm(formJson));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Form Builder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Available Words\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this), matchingWords.map((word, index) => /*#__PURE__*/_jsxDEV(MatchingWord, {\n          word: word,\n          onDrop: handleDrop\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Matching Pairs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this), matchingPairs.map(pair => /*#__PURE__*/_jsxDEV(MatchingPair, {\n          question: pair,\n          onDrop: handleDrop\n        }, pair.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"save-form-btn btn\",\n      onClick: () => saveForm(),\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 9\n  }, this);\n};\n_s3(CategorizeQuestion, \"8pizBuPrn4L873eFgWe2pUxWD0c=\");\n_c3 = CategorizeQuestion;\nexport default CategorizeQuestion;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"MatchingWord\");\n$RefreshReg$(_c2, \"MatchingPair\");\n$RefreshReg$(_c3, \"CategorizeQuestion\");","map":{"version":3,"names":["React","useState","useDrag","useDrop","jsxDEV","_jsxDEV","MatchingWord","word","onDrop","_s","drag","type","item","ref","style","padding","border","margin","cursor","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","MatchingPair","question","_s2","isOver","drop","accept","id","collect","monitor","prompt","answer","_c2","CategorizeQuestion","_s3","matchingWords","setMatchingWords","matchingPairs","setMatchingPairs","handleDrop","pairId","updatedPairs","map","pair","saveForm","formJson","title","formTitle","body","formBody","dispatch","formActions","display","flex","index","className","onClick","_c3","$RefreshReg$"],"sources":["C:/Users/Dell/Desktop/bolo/react-form-builder/frontend/src/pages/QuestionTypes/CategorizeQuestion.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { useDrop, useDrag } from 'react-dnd';\r\n\r\n// const Answer = ({ answer, index, moveAnswer }) => {\r\n//     const [{ isDragging }, drag] = useDrag({\r\n//         type: 'ANSWER',\r\n//         item: { index },\r\n//         collect: (monitor) => ({\r\n//             isDragging: monitor.isDragging(),\r\n//         }),\r\n//     });\r\n\r\n//     return (\r\n//         <div ref={drag} style={{ padding: '8px', border: '1px solid #ccc', margin: '4px', cursor: 'move', opacity: isDragging ? 0.5 : 1 }}>\r\n//             {answer.text}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// const Category = ({ category, answers, setAnswers, moveAnswer }) => {\r\n//     const [, drop] = useDrop({\r\n//         accept: 'ANSWER',\r\n//         drop: (item) => {\r\n//             moveAnswer(item.index, answers.length, category);\r\n//             const updatedAnswers = [...answers];\r\n//             updatedAnswers[item.index].category = category;\r\n//             setAnswers(updatedAnswers);\r\n//         },\r\n//     });\r\n\r\n//     return (\r\n//         <div ref={drop} style={{ padding: '8px', border: '2px solid #000', margin: '8px' }}>\r\n//             <strong>{category}</strong>\r\n//             {answers\r\n//                 .filter((answer) => answer.category === category)\r\n//                 .map((answer, index) => (\r\n//                     <p key={index}>{answer.text}</p>\r\n//                 ))}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// const CategorizeQuestion = ({ question, onChange }) => {\r\n//     const [answers, setAnswers] = useState([]);\r\n\r\n//     const handleAnswerChange = (dragIndex, dropIndex, newCategory) => {\r\n//         const updatedAnswers = [...answers];\r\n//         const [draggedAnswer] = updatedAnswers.splice(dragIndex, 1);\r\n//         updatedAnswers.splice(dropIndex, 0, draggedAnswer);\r\n//         setAnswers(updatedAnswers);\r\n\r\n//         // Update the category if a new category is provided\r\n//         if (newCategory) {\r\n//             draggedAnswer.category = newCategory;\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             <label>Categorize:</label>\r\n//             <input\r\n//                 type=\"text\"\r\n//                 placeholder=\"Enter the categorization question\"\r\n//                 value={question.content}\r\n//                 onChange={(e) => onChange({ ...question, content: e.target.value })}\r\n//             />\r\n//             <div style={{ display: 'flex', marginTop: '10px' }}>\r\n//                 <div style={{ flex: 1 }}>\r\n//                     <h4>Answers</h4>\r\n//                     {answers.map((answer, index) => (\r\n//                         <Answer key={index} answer={answer} index={index} moveAnswer={handleAnswerChange} />\r\n//                     ))}\r\n//                 </div>\r\n//                 <div style={{ flex: 1 }}>\r\n//                     <h4>Categories</h4>\r\n//                     {['Category 1', 'Category 2', 'Category 3'].map((category, index) => (\r\n//                         <Category\r\n//                             key={index}\r\n//                             category={category}\r\n//                             answers={answers}\r\n//                             setAnswers={setAnswers}\r\n//                             moveAnswer={handleAnswerChange}\r\n//                         />\r\n//                     ))}\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default CategorizeQuestion;\r\nimport React, { useState } from 'react';\r\nimport { useDrag, useDrop } from 'react-dnd';\r\n\r\nconst MatchingWord = ({ word, onDrop }) => {\r\n    const [, drag] = useDrag({\r\n        type: 'WORD',\r\n        item: { word },\r\n    });\r\n\r\n    return (\r\n        <div ref={drag} style={{ padding: '8px', border: '1px solid #ccc', margin: '4px', cursor: 'move' }}>\r\n            {word}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst MatchingPair = ({ question, onDrop }) => {\r\n    const [{ isOver }, drop] = useDrop({\r\n        accept: 'WORD',\r\n        drop: (item) => onDrop(item.word, question.id),\r\n        collect: (monitor) => ({\r\n            isOver: !!monitor.isOver(),\r\n        }),\r\n    });\r\n\r\n    return (\r\n        <div\r\n            ref={drop}\r\n            style={{\r\n                padding: '8px',\r\n                border: isOver ? '2px dashed #000' : '2px solid #000',\r\n                margin: '8px',\r\n            }}\r\n        >\r\n            {question.prompt} {question.answer}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst CategorizeQuestion = () => {\r\n    const [matchingWords, setMatchingWords] = useState(['Apple', 'Banana', 'Cherry', 'Date']);\r\n    const [matchingPairs, setMatchingPairs] = useState([\r\n        { id: 1, prompt: 'Fruit 1:', answer: '' },\r\n        { id: 2, prompt: 'Fruit 2:', answer: '' },\r\n        { id: 3, prompt: 'Fruit 3:', answer: '' },\r\n        { id: 4, prompt: 'Fruit 4:', answer: '' },\r\n    ]);\r\n\r\n    const handleDrop = (word, pairId) => {\r\n        const updatedPairs = matchingPairs.map((pair) =>\r\n            pair.id === pairId ? { ...pair, answer: word } : pair\r\n        );\r\n        setMatchingPairs(updatedPairs);\r\n    };\r\n\r\n    const saveForm = () => {\r\n\t\tconst formJson = {\r\n\t\t\ttitle: formTitle,\r\n\t\t\tbody: formBody,\r\n\t\t};\r\n\t\tdispatch(formActions.saveForm(formJson));\r\n\t};\r\n\r\n    return (\r\n        <div>\r\n            <h2>Form Builder</h2>\r\n            <div style={{ display: 'flex' }}>\r\n                <div style={{ flex: 1 }}>\r\n                    <h3>Available Words</h3>\r\n                    {matchingWords.map((word, index) => (\r\n                        <MatchingWord key={index} word={word} onDrop={handleDrop} />\r\n                    ))}\r\n                </div>\r\n                <div style={{ flex: 1 }}>\r\n                    <h3>Matching Pairs</h3>\r\n                    {matchingPairs.map((pair) => (\r\n                        <MatchingPair key={pair.id} question={pair} onDrop={handleDrop} />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n            <button className=\"save-form-btn btn\" onClick={() => saveForm()}>\r\n                Save\r\n            </button>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default CategorizeQuestion;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}